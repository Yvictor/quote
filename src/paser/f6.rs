use crate::paser::bcd;

#[derive(Debug, PartialEq)]
pub struct BidAsk {
    bid_price: [f64; 5],
    bid_volume: [u64; 5],
    ask_price: [f64; 5],
    ask_volume: [u64; 5],
}
#[derive(Debug, PartialEq)]
pub struct Tick {
    price: f64,
    volume: u64,
}
#[derive(Debug, PartialEq)]
pub struct Quote {
    bidask: BidAsk,
    tick: Tick,
}

pub fn bytes2quote(packbcd_arr: &[u8]) -> Quote {
    let tick_raw: &[u8; 9] = &packbcd_arr[..9]
        .try_into()
        .expect("slice with incorrect length");
    let ba_raw: &[u8] = &packbcd_arr[9..];
    let mut bid_price: [f64; 5] = [0.; 5];
    let mut bid_volume: [u64; 5] = [0; 5];
    let mut ask_price: [f64; 5] = [0.; 5];
    let mut ask_volume: [u64; 5] = [0; 5];
    for i in 0..5 {
        let r_raw = &ba_raw[i * 9..(i + 1) * 9];
        bid_price[i] = bcd::bcd2price(r_raw[..5].try_into().unwrap());
        bid_volume[i] = bcd::bcd2volume(r_raw[5..9].try_into().unwrap());
        let r_raw = &ba_raw[(i+5) * 9..(i +5 +1) * 9];
        ask_price[i] = bcd::bcd2price(r_raw[..5].try_into().unwrap());
        ask_volume[i] = bcd::bcd2volume(r_raw[5..9].try_into().unwrap());
    }
    Quote {
        bidask: BidAsk {
            bid_price,
            bid_volume,
            ask_price,
            ask_volume,
        },
        tick: Tick {
            price: bcd::bcd2price(tick_raw[..5].try_into().unwrap()),
            volume: bcd::bcd2volume(tick_raw[5..9].try_into().unwrap()),
        },
    }
}

#[cfg(test)]
extern crate test_case;

#[cfg(test)]
mod tests {
    use super::*;
    use test_case::test_case;

    #[test]
    fn bytes2quote_test() {
        assert_eq!(
            Quote {
                bidask: BidAsk {
                    bid_price: [545.0, 541.0, 540.0, 530.0, 522.0],
                    bid_volume: [1, 1, 1, 2, 24],
                    ask_price: [555.0, 558.0, 560.0, 561.0, 562.0],
                    ask_volume: [1, 1, 1, 2, 1],
                },
                tick: Tick {
                    price: 552.0,
                    volume: 2,
                },
            },
            bytes2quote(&[
                0x0, 0x5, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5, 0x45, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x1, 0x0, 0x5, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x5, 0x40, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x1, 0x0, 0x5, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5, 0x22,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x24, 0x0, 0x5, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0,
                0x5, 0x58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x5, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x1, 0x0, 0x5, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5, 0x62, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x1
            ])
        );
    }

    #[test_case(&[
        0x0, 0x5, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5, 0x45, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x1, 0x0, 0x5, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x5, 0x40, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x1, 0x0, 0x5, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5, 0x22,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x24, 0x0, 0x5, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0,
        0x5, 0x58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x5, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x1, 0x0, 0x5, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5, 0x62, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x1
    ], Quote {
        bidask: BidAsk {
            bid_price: [545.0, 541.0, 540.0, 530.0, 522.0],
            bid_volume: [1, 1, 1, 2, 24],
            ask_price: [555.0, 558.0, 560.0, 561.0, 562.0],
            ask_volume: [1, 1, 1, 2, 1],
        },
        tick: Tick {
            price: 552.0,
            volume: 2,
        },
    }; "case1")]
    #[test_case(&[
        0x0, 0x0, 0x1, 0x82, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x1, 0x82, 0x0, 0x0, 0x0, 0x0, 0x6,
        0x0, 0x0, 0x1, 0x81, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0,
        0x16, 0x0, 0x0, 0x1, 0x76, 0x0, 0x0, 0x0, 0x0, 0x28, 0x0, 0x0, 0x1, 0x75, 0x0, 0x0, 0x0,
        0x0, 0x20, 0x0, 0x0, 0x1, 0x93, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x1, 0x94, 0x0, 0x0,
        0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x95, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x96, 0x0, 0x0,
        0x0, 0x0, 0x25, 0x0, 0x0, 0x1, 0x97, 0x0, 0x0, 0x0, 0x0, 0x26,
    ], Quote {
        bidask: BidAsk {
            bid_price: [1.82, 1.81, 1.8, 1.76, 1.75],
            bid_volume: [6, 5, 16, 28, 20],
            ask_price: [1.93, 1.94, 1.95, 1.96, 1.97],
            ask_volume: [8, 1, 1, 25, 26],
        },
        tick: Tick {
            price: 1.82,
            volume: 6,
        },
    }; "case2")]
    fn bytes2quote_testcase(input: &[u8], expected: Quote) {
        assert_eq!(expected, bytes2quote(input))
    }
}
