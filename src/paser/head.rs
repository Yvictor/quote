use crate::paser::bcd;
use std::str;

use bytes_cast::BytesCast;

#[derive(BytesCast, Debug, PartialEq)]
#[repr(C)]
pub struct TWExMdHead {
    // Tw Exchange Market data head
    esc_code: u8,
    len: [u8; 2],
    market: u8,
    fcode: u8,
    fver: u8,
    seqno: [u8; 4],
}

impl TWExMdHead {
    pub fn len(&self) -> u64 {
        bcd::bcdarr2num(&self.len)
    }
    pub const fn market(&self) -> u8 {
        *bcd::bcd2num(self.market) as u8
    }
    pub const fn fcode(&self) -> u8 {
        *bcd::bcd2num(self.fcode) as u8
    }
    pub const fn fver(&self) -> u8 {
        *bcd::bcd2num(self.fver) as u8
    }
    pub fn seqno(&self) -> u64 {
        bcd::bcdarr2num(&self.seqno)
    }
}

#[derive(BytesCast, Debug, PartialEq)]
#[repr(C)]
pub struct TwExMdRtBase {
    // Tw Exchange Market data Realtime Base
    symbol: [u8; 6],
    pub time: bcd::TwExMdTimeu6,
}

impl TwExMdRtBase {
    pub fn symbol(&self) -> &str {
        //Result<&str, str::Utf8Error>{
        str::from_utf8(&self.symbol).unwrap()
    }
}

#[cfg(test)]
extern crate test_case;

#[cfg(test)]
mod tests {
    use super::*;
    // use test_case::test_case;

    #[test]
    fn tw_ex_head_test() {
        let data = &[
            0x1b, 0x1, 0x31, 0x1, 0x6, 0x4, 0x0, 0x10, 0x93, 0x59, 0x39, 0x31, 0x31, 0x36, 0x31,
            0x36, 0x9, 0x0, 0x0, 0x14, 0x8, 0x66, 0xda, 0x0, 0x8, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0,
            0x1, 0x82, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x1, 0x82, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0,
            0x0, 0x1, 0x81, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x16,
            0x0, 0x0, 0x1, 0x76, 0x0, 0x0, 0x0, 0x0, 0x28, 0x0, 0x0, 0x1, 0x75, 0x0, 0x0, 0x0, 0x0,
            0x20, 0x0, 0x0, 0x1, 0x93, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x1, 0x94, 0x0, 0x0, 0x0,
            0x0, 0x1, 0x0, 0x0, 0x1, 0x95, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x96, 0x0, 0x0,
            0x0, 0x0, 0x25, 0x0, 0x0, 0x1, 0x97, 0x0, 0x0, 0x0, 0x0, 0x26, 0xc6,
        ];
        let (head, _rest) = TWExMdHead::from_bytes(data).unwrap();
        let (base, _rest) = TwExMdRtBase::from_bytes(_rest).unwrap();
        assert_eq!(head.len(), 131);
        assert_eq!(head.market(), 1);
        assert_eq!(head.fcode(), 6);
        assert_eq!(head.fver(), 4);
        assert_eq!(head.seqno(), 109359);
        assert_eq!(base.symbol(), String::from("911616"));
        assert_eq!(base.time.to_string(), String::from("09:00:00.140866"));
    }
}
